# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Warmup: 20 iterations, 2 s each
# Measurement: 10 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.gs.collections.impl.jmh.GroupBySetTest.groupBy_10000_keys_parallel_lazy_scala

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 2
# Warmup Iteration   1: 6.934 ops/s
# Warmup Iteration   2: 9.225 ops/s
# Warmup Iteration   3: 14.555 ops/s
# Warmup Iteration   4: 14.707 ops/s
# Warmup Iteration   5: 14.431 ops/s
# Warmup Iteration   6: 14.609 ops/s
# Warmup Iteration   7: 14.759 ops/s
# Warmup Iteration   8: 14.859 ops/s
# Warmup Iteration   9: 14.882 ops/s
# Warmup Iteration  10: 14.641 ops/s
# Warmup Iteration  11: 14.773 ops/s
# Warmup Iteration  12: 15.175 ops/s
# Warmup Iteration  13: 14.841 ops/s
# Warmup Iteration  14: 15.045 ops/s
# Warmup Iteration  15: 14.870 ops/s
# Warmup Iteration  16: 15.079 ops/s
# Warmup Iteration  17: 15.168 ops/s
# Warmup Iteration  18: 15.393 ops/s
# Warmup Iteration  19: 14.838 ops/s
# Warmup Iteration  20: 14.892 ops/s
Iteration   1: 15.047 ops/s
Iteration   2: 15.035 ops/s
Iteration   3: 14.706 ops/s
Iteration   4: 15.179 ops/s
Iteration   5: 14.935 ops/s
Iteration   6: 14.878 ops/s
Iteration   7: 14.661 ops/s
Iteration   8: 14.984 ops/s
Iteration   9: 15.034 ops/s
Iteration  10: 14.929 ops/s

# Run progress: 50.00% complete, ETA 00:01:01
# Fork: 2 of 2
# Warmup Iteration   1: 7.095 ops/s
# Warmup Iteration   2: 11.784 ops/s
# Warmup Iteration   3: 12.003 ops/s
# Warmup Iteration   4: 8.385 ops/s
# Warmup Iteration   5: 14.913 ops/s
# Warmup Iteration   6: 14.630 ops/s
# Warmup Iteration   7: 14.869 ops/s
# Warmup Iteration   8: 15.004 ops/s
# Warmup Iteration   9: 14.979 ops/s
# Warmup Iteration  10: 14.713 ops/s
# Warmup Iteration  11: 14.842 ops/s
# Warmup Iteration  12: 14.943 ops/s
# Warmup Iteration  13: 15.186 ops/s
# Warmup Iteration  14: 14.838 ops/s
# Warmup Iteration  15: 14.813 ops/s
# Warmup Iteration  16: 15.017 ops/s
# Warmup Iteration  17: 14.861 ops/s
# Warmup Iteration  18: 14.906 ops/s
# Warmup Iteration  19: 14.847 ops/s
# Warmup Iteration  20: 14.995 ops/s
Iteration   1: 14.985 ops/s
Iteration   2: 14.998 ops/s
Iteration   3: 15.174 ops/s
Iteration   4: 14.946 ops/s
Iteration   5: 14.854 ops/s
Iteration   6: 14.898 ops/s
Iteration   7: 15.144 ops/s
Iteration   8: 14.976 ops/s
Iteration   9: 14.875 ops/s
Iteration  10: 15.040 ops/s


Result "com.gs.collections.impl.jmh.GroupBySetTest.groupBy_10000_keys_parallel_lazy_scala":
  14.964 ±(99.9%) 0.116 ops/s [Average]
  (min, avg, max) = (14.661, 14.964, 15.179), stdev = 0.134
  CI (99.9%): [14.848, 15.080] (assumes normal distribution)


# Run complete. Total time: 00:02:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt   Score   Error  Units
GroupBySetTest.groupBy_10000_keys_parallel_lazy_scala  thrpt   20  14.964 ± 0.116  ops/s

Benchmark result is saved to gs-collections/exp-RETU-STATIC-out/microbenchmarks-original_GroupBySetTest_groupBy_10000_keys_parallel_lazy_scala_retu_trial2.csv
