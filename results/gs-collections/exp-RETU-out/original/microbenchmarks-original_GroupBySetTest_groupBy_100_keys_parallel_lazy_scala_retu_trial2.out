# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Warmup: 20 iterations, 2 s each
# Measurement: 10 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.gs.collections.impl.jmh.GroupBySetTest.groupBy_100_keys_parallel_lazy_scala

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 2
# Warmup Iteration   1: 12.729 ops/s
# Warmup Iteration   2: 21.153 ops/s
# Warmup Iteration   3: 21.681 ops/s
# Warmup Iteration   4: 22.539 ops/s
# Warmup Iteration   5: 22.586 ops/s
# Warmup Iteration   6: 22.650 ops/s
# Warmup Iteration   7: 22.626 ops/s
# Warmup Iteration   8: 22.422 ops/s
# Warmup Iteration   9: 22.873 ops/s
# Warmup Iteration  10: 23.226 ops/s
# Warmup Iteration  11: 22.982 ops/s
# Warmup Iteration  12: 22.664 ops/s
# Warmup Iteration  13: 23.255 ops/s
# Warmup Iteration  14: 22.859 ops/s
# Warmup Iteration  15: 23.198 ops/s
# Warmup Iteration  16: 23.125 ops/s
# Warmup Iteration  17: 23.188 ops/s
# Warmup Iteration  18: 22.984 ops/s
# Warmup Iteration  19: 22.886 ops/s
# Warmup Iteration  20: 22.984 ops/s
Iteration   1: 22.700 ops/s
Iteration   2: 22.827 ops/s
Iteration   3: 22.741 ops/s
Iteration   4: 22.790 ops/s
Iteration   5: 22.861 ops/s
Iteration   6: 22.929 ops/s
Iteration   7: 23.020 ops/s
Iteration   8: 23.164 ops/s
Iteration   9: 23.064 ops/s
Iteration  10: 22.727 ops/s

# Run progress: 50.00% complete, ETA 00:01:01
# Fork: 2 of 2
# Warmup Iteration   1: 12.269 ops/s
# Warmup Iteration   2: 21.194 ops/s
# Warmup Iteration   3: 22.237 ops/s
# Warmup Iteration   4: 22.864 ops/s
# Warmup Iteration   5: 22.938 ops/s
# Warmup Iteration   6: 23.280 ops/s
# Warmup Iteration   7: 23.292 ops/s
# Warmup Iteration   8: 23.375 ops/s
# Warmup Iteration   9: 23.401 ops/s
# Warmup Iteration  10: 23.449 ops/s
# Warmup Iteration  11: 23.401 ops/s
# Warmup Iteration  12: 23.701 ops/s
# Warmup Iteration  13: 23.518 ops/s
# Warmup Iteration  14: 23.331 ops/s
# Warmup Iteration  15: 23.404 ops/s
# Warmup Iteration  16: 23.779 ops/s
# Warmup Iteration  17: 23.496 ops/s
# Warmup Iteration  18: 23.247 ops/s
# Warmup Iteration  19: 23.674 ops/s
# Warmup Iteration  20: 23.214 ops/s
Iteration   1: 23.270 ops/s
Iteration   2: 23.573 ops/s
Iteration   3: 23.330 ops/s
Iteration   4: 23.214 ops/s
Iteration   5: 23.561 ops/s
Iteration   6: 23.439 ops/s
Iteration   7: 23.545 ops/s
Iteration   8: 23.126 ops/s
Iteration   9: 23.404 ops/s
Iteration  10: 23.649 ops/s


Result "com.gs.collections.impl.jmh.GroupBySetTest.groupBy_100_keys_parallel_lazy_scala":
  23.147 ±(99.9%) 0.274 ops/s [Average]
  (min, avg, max) = (22.700, 23.147, 23.649), stdev = 0.315
  CI (99.9%): [22.873, 23.421] (assumes normal distribution)


# Run complete. Total time: 00:02:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt   Score   Error  Units
GroupBySetTest.groupBy_100_keys_parallel_lazy_scala  thrpt   20  23.147 ± 0.274  ops/s

Benchmark result is saved to gs-collections/exp-RETU-STATIC-out/microbenchmarks-original_GroupBySetTest_groupBy_100_keys_parallel_lazy_scala_retu_trial2.csv
