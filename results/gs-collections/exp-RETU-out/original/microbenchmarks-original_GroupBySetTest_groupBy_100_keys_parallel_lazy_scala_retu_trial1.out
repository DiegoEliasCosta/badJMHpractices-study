# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Warmup: 20 iterations, 2 s each
# Measurement: 10 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.gs.collections.impl.jmh.GroupBySetTest.groupBy_100_keys_parallel_lazy_scala

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 2
# Warmup Iteration   1: 12.768 ops/s
# Warmup Iteration   2: 21.883 ops/s
# Warmup Iteration   3: 22.360 ops/s
# Warmup Iteration   4: 22.798 ops/s
# Warmup Iteration   5: 23.330 ops/s
# Warmup Iteration   6: 23.671 ops/s
# Warmup Iteration   7: 23.011 ops/s
# Warmup Iteration   8: 23.844 ops/s
# Warmup Iteration   9: 23.377 ops/s
# Warmup Iteration  10: 23.518 ops/s
# Warmup Iteration  11: 23.732 ops/s
# Warmup Iteration  12: 23.610 ops/s
# Warmup Iteration  13: 24.086 ops/s
# Warmup Iteration  14: 23.722 ops/s
# Warmup Iteration  15: 23.887 ops/s
# Warmup Iteration  16: 23.813 ops/s
# Warmup Iteration  17: 23.819 ops/s
# Warmup Iteration  18: 23.849 ops/s
# Warmup Iteration  19: 23.963 ops/s
# Warmup Iteration  20: 23.563 ops/s
Iteration   1: 23.538 ops/s
Iteration   2: 23.695 ops/s
Iteration   3: 23.751 ops/s
Iteration   4: 23.802 ops/s
Iteration   5: 23.898 ops/s
Iteration   6: 23.753 ops/s
Iteration   7: 23.688 ops/s
Iteration   8: 23.532 ops/s
Iteration   9: 23.848 ops/s
Iteration  10: 23.492 ops/s

# Run progress: 50.00% complete, ETA 00:01:01
# Fork: 2 of 2
# Warmup Iteration   1: 12.781 ops/s
# Warmup Iteration   2: 21.477 ops/s
# Warmup Iteration   3: 17.469 ops/s
# Warmup Iteration   4: 23.947 ops/s
# Warmup Iteration   5: 24.039 ops/s
# Warmup Iteration   6: 24.058 ops/s
# Warmup Iteration   7: 24.240 ops/s
# Warmup Iteration   8: 24.235 ops/s
# Warmup Iteration   9: 23.869 ops/s
# Warmup Iteration  10: 24.493 ops/s
# Warmup Iteration  11: 24.327 ops/s
# Warmup Iteration  12: 24.047 ops/s
# Warmup Iteration  13: 24.566 ops/s
# Warmup Iteration  14: 24.441 ops/s
# Warmup Iteration  15: 24.182 ops/s
# Warmup Iteration  16: 24.538 ops/s
# Warmup Iteration  17: 24.371 ops/s
# Warmup Iteration  18: 24.562 ops/s
# Warmup Iteration  19: 24.165 ops/s
# Warmup Iteration  20: 24.406 ops/s
Iteration   1: 24.776 ops/s
Iteration   2: 24.540 ops/s
Iteration   3: 24.806 ops/s
Iteration   4: 24.213 ops/s
Iteration   5: 24.498 ops/s
Iteration   6: 24.383 ops/s
Iteration   7: 24.198 ops/s
Iteration   8: 24.386 ops/s
Iteration   9: 24.512 ops/s
Iteration  10: 24.469 ops/s


Result "com.gs.collections.impl.jmh.GroupBySetTest.groupBy_100_keys_parallel_lazy_scala":
  24.089 ±(99.9%) 0.377 ops/s [Average]
  (min, avg, max) = (23.492, 24.089, 24.806), stdev = 0.434
  CI (99.9%): [23.712, 24.465] (assumes normal distribution)


# Run complete. Total time: 00:02:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt   Score   Error  Units
GroupBySetTest.groupBy_100_keys_parallel_lazy_scala  thrpt   20  24.089 ± 0.377  ops/s

Benchmark result is saved to gs-collections/exp-RETU-STATIC-out/microbenchmarks-original_GroupBySetTest_groupBy_100_keys_parallel_lazy_scala_retu_trial1.csv
