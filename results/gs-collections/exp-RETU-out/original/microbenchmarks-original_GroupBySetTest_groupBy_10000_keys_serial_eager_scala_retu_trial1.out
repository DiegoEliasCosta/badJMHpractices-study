# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Warmup: 20 iterations, 2 s each
# Measurement: 10 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.gs.collections.impl.jmh.GroupBySetTest.groupBy_10000_keys_serial_eager_scala

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 2
# Warmup Iteration   1: 3.323 ops/s
# Warmup Iteration   2: 5.126 ops/s
# Warmup Iteration   3: 5.268 ops/s
# Warmup Iteration   4: 5.169 ops/s
# Warmup Iteration   5: 5.103 ops/s
# Warmup Iteration   6: 5.213 ops/s
# Warmup Iteration   7: 4.949 ops/s
# Warmup Iteration   8: 5.176 ops/s
# Warmup Iteration   9: 4.709 ops/s
# Warmup Iteration  10: 5.041 ops/s
# Warmup Iteration  11: 5.153 ops/s
# Warmup Iteration  12: 5.230 ops/s
# Warmup Iteration  13: 5.433 ops/s
# Warmup Iteration  14: 5.437 ops/s
# Warmup Iteration  15: 5.437 ops/s
# Warmup Iteration  16: 5.428 ops/s
# Warmup Iteration  17: 4.904 ops/s
# Warmup Iteration  18: 4.974 ops/s
# Warmup Iteration  19: 4.973 ops/s
# Warmup Iteration  20: 4.711 ops/s
Iteration   1: 5.127 ops/s
Iteration   2: 5.440 ops/s
Iteration   3: 5.438 ops/s
Iteration   4: 5.092 ops/s
Iteration   5: 5.456 ops/s
Iteration   6: 4.956 ops/s
Iteration   7: 5.071 ops/s
Iteration   8: 5.389 ops/s
Iteration   9: 5.432 ops/s
Iteration  10: 5.019 ops/s

# Run progress: 50.00% complete, ETA 00:01:03
# Fork: 2 of 2
# Warmup Iteration   1: 3.478 ops/s
# Warmup Iteration   2: 5.086 ops/s
# Warmup Iteration   3: 5.397 ops/s
# Warmup Iteration   4: 4.885 ops/s
# Warmup Iteration   5: 5.212 ops/s
# Warmup Iteration   6: 5.534 ops/s
# Warmup Iteration   7: 5.387 ops/s
# Warmup Iteration   8: 5.396 ops/s
# Warmup Iteration   9: 4.993 ops/s
# Warmup Iteration  10: 4.986 ops/s
# Warmup Iteration  11: 5.580 ops/s
# Warmup Iteration  12: 5.331 ops/s
# Warmup Iteration  13: 5.577 ops/s
# Warmup Iteration  14: 5.575 ops/s
# Warmup Iteration  15: 5.181 ops/s
# Warmup Iteration  16: 5.575 ops/s
# Warmup Iteration  17: 5.094 ops/s
# Warmup Iteration  18: 5.090 ops/s
# Warmup Iteration  19: 5.084 ops/s
# Warmup Iteration  20: 5.384 ops/s
Iteration   1: 5.581 ops/s
Iteration   2: 4.804 ops/s
Iteration   3: 5.567 ops/s
Iteration   4: 5.585 ops/s
Iteration   5: 5.576 ops/s
Iteration   6: 5.600 ops/s
Iteration   7: 5.571 ops/s
Iteration   8: 4.920 ops/s
Iteration   9: 4.975 ops/s
Iteration  10: 5.473 ops/s


Result "com.gs.collections.impl.jmh.GroupBySetTest.groupBy_10000_keys_serial_eager_scala":
  5.304 ±(99.9%) 0.236 ops/s [Average]
  (min, avg, max) = (4.804, 5.304, 5.600), stdev = 0.272
  CI (99.9%): [5.067, 5.540] (assumes normal distribution)


# Run complete. Total time: 00:02:06

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt  Score   Error  Units
GroupBySetTest.groupBy_10000_keys_serial_eager_scala  thrpt   20  5.304 ± 0.236  ops/s

Benchmark result is saved to gs-collections/exp-RETU-STATIC-out/microbenchmarks-original_GroupBySetTest_groupBy_10000_keys_serial_eager_scala_retu_trial1.csv
