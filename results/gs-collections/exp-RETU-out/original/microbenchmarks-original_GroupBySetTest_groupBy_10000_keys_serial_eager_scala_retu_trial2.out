# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Warmup: 20 iterations, 2 s each
# Measurement: 10 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.gs.collections.impl.jmh.GroupBySetTest.groupBy_10000_keys_serial_eager_scala

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 2
# Warmup Iteration   1: 3.492 ops/s
# Warmup Iteration   2: 4.934 ops/s
# Warmup Iteration   3: 5.315 ops/s
# Warmup Iteration   4: 5.200 ops/s
# Warmup Iteration   5: 5.090 ops/s
# Warmup Iteration   6: 5.388 ops/s
# Warmup Iteration   7: 5.256 ops/s
# Warmup Iteration   8: 4.941 ops/s
# Warmup Iteration   9: 4.697 ops/s
# Warmup Iteration  10: 4.812 ops/s
# Warmup Iteration  11: 4.747 ops/s
# Warmup Iteration  12: 5.278 ops/s
# Warmup Iteration  13: 5.438 ops/s
# Warmup Iteration  14: 5.220 ops/s
# Warmup Iteration  15: 5.441 ops/s
# Warmup Iteration  16: 5.177 ops/s
# Warmup Iteration  17: 5.232 ops/s
# Warmup Iteration  18: 4.650 ops/s
# Warmup Iteration  19: 4.969 ops/s
# Warmup Iteration  20: 4.968 ops/s
Iteration   1: 5.344 ops/s
Iteration   2: 5.438 ops/s
Iteration   3: 5.439 ops/s
Iteration   4: 5.365 ops/s
Iteration   5: 5.240 ops/s
Iteration   6: 5.346 ops/s
Iteration   7: 5.447 ops/s
Iteration   8: 5.435 ops/s
Iteration   9: 5.449 ops/s
Iteration  10: 5.263 ops/s

# Run progress: 50.00% complete, ETA 00:01:02
# Fork: 2 of 2
# Warmup Iteration   1: 3.296 ops/s
# Warmup Iteration   2: 5.120 ops/s
# Warmup Iteration   3: 5.307 ops/s
# Warmup Iteration   4: 5.217 ops/s
# Warmup Iteration   5: 5.189 ops/s
# Warmup Iteration   6: 5.457 ops/s
# Warmup Iteration   7: 5.303 ops/s
# Warmup Iteration   8: 5.320 ops/s
# Warmup Iteration   9: 4.928 ops/s
# Warmup Iteration  10: 5.126 ops/s
# Warmup Iteration  11: 5.494 ops/s
# Warmup Iteration  12: 5.502 ops/s
# Warmup Iteration  13: 5.551 ops/s
# Warmup Iteration  14: 5.006 ops/s
# Warmup Iteration  15: 5.329 ops/s
# Warmup Iteration  16: 5.559 ops/s
# Warmup Iteration  17: 5.092 ops/s
# Warmup Iteration  18: 5.064 ops/s
# Warmup Iteration  19: 4.609 ops/s
# Warmup Iteration  20: 5.329 ops/s
Iteration   1: 5.563 ops/s
Iteration   2: 5.561 ops/s
Iteration   3: 5.570 ops/s
Iteration   4: 5.562 ops/s
Iteration   5: 5.181 ops/s
Iteration   6: 5.304 ops/s
Iteration   7: 5.362 ops/s
Iteration   8: 5.565 ops/s
Iteration   9: 5.567 ops/s
Iteration  10: 5.551 ops/s


Result "com.gs.collections.impl.jmh.GroupBySetTest.groupBy_10000_keys_serial_eager_scala":
  5.428 ±(99.9%) 0.107 ops/s [Average]
  (min, avg, max) = (5.181, 5.428, 5.570), stdev = 0.123
  CI (99.9%): [5.320, 5.535] (assumes normal distribution)


# Run complete. Total time: 00:02:06

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt  Score   Error  Units
GroupBySetTest.groupBy_10000_keys_serial_eager_scala  thrpt   20  5.428 ± 0.107  ops/s

Benchmark result is saved to gs-collections/exp-RETU-STATIC-out/microbenchmarks-original_GroupBySetTest_groupBy_10000_keys_serial_eager_scala_retu_trial2.csv
