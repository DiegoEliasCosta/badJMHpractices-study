# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Warmup: 20 iterations, 2 s each
# Measurement: 10 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.gs.collections.impl.jmh.GroupBySetTest.groupBy_10000_keys_parallel_lazy_scala

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 2
# Warmup Iteration   1: 6.992 ops/s
# Warmup Iteration   2: 8.298 ops/s
# Warmup Iteration   3: 14.673 ops/s
# Warmup Iteration   4: 14.658 ops/s
# Warmup Iteration   5: 14.878 ops/s
# Warmup Iteration   6: 14.999 ops/s
# Warmup Iteration   7: 14.737 ops/s
# Warmup Iteration   8: 14.892 ops/s
# Warmup Iteration   9: 14.777 ops/s
# Warmup Iteration  10: 14.948 ops/s
# Warmup Iteration  11: 14.660 ops/s
# Warmup Iteration  12: 15.068 ops/s
# Warmup Iteration  13: 15.047 ops/s
# Warmup Iteration  14: 14.879 ops/s
# Warmup Iteration  15: 15.187 ops/s
# Warmup Iteration  16: 15.026 ops/s
# Warmup Iteration  17: 14.957 ops/s
# Warmup Iteration  18: 14.907 ops/s
# Warmup Iteration  19: 14.984 ops/s
# Warmup Iteration  20: 15.323 ops/s
Iteration   1: 14.844 ops/s
Iteration   2: 14.916 ops/s
Iteration   3: 15.179 ops/s
Iteration   4: 15.102 ops/s
Iteration   5: 15.196 ops/s
Iteration   6: 15.045 ops/s
Iteration   7: 15.114 ops/s
Iteration   8: 15.122 ops/s
Iteration   9: 15.092 ops/s
Iteration  10: 15.128 ops/s

# Run progress: 50.00% complete, ETA 00:01:02
# Fork: 2 of 2
# Warmup Iteration   1: 6.775 ops/s
# Warmup Iteration   2: 8.728 ops/s
# Warmup Iteration   3: 14.417 ops/s
# Warmup Iteration   4: 14.596 ops/s
# Warmup Iteration   5: 14.709 ops/s
# Warmup Iteration   6: 14.729 ops/s
# Warmup Iteration   7: 14.532 ops/s
# Warmup Iteration   8: 14.639 ops/s
# Warmup Iteration   9: 14.902 ops/s
# Warmup Iteration  10: 14.939 ops/s
# Warmup Iteration  11: 14.963 ops/s
# Warmup Iteration  12: 14.920 ops/s
# Warmup Iteration  13: 14.854 ops/s
# Warmup Iteration  14: 14.917 ops/s
# Warmup Iteration  15: 14.853 ops/s
# Warmup Iteration  16: 14.781 ops/s
# Warmup Iteration  17: 14.973 ops/s
# Warmup Iteration  18: 15.057 ops/s
# Warmup Iteration  19: 14.751 ops/s
# Warmup Iteration  20: 15.044 ops/s
Iteration   1: 14.786 ops/s
Iteration   2: 14.880 ops/s
Iteration   3: 15.180 ops/s
Iteration   4: 14.846 ops/s
Iteration   5: 14.858 ops/s
Iteration   6: 14.709 ops/s
Iteration   7: 14.831 ops/s
Iteration   8: 14.731 ops/s
Iteration   9: 14.913 ops/s
Iteration  10: 14.917 ops/s


Result "com.gs.collections.impl.jmh.GroupBySetTest.groupBy_10000_keys_parallel_lazy_scala":
  14.969 ±(99.9%) 0.139 ops/s [Average]
  (min, avg, max) = (14.709, 14.969, 15.196), stdev = 0.160
  CI (99.9%): [14.831, 15.108] (assumes normal distribution)


# Run complete. Total time: 00:02:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt   Score   Error  Units
GroupBySetTest.groupBy_10000_keys_parallel_lazy_scala  thrpt   20  14.969 ± 0.139  ops/s

Benchmark result is saved to gs-collections/exp-RETU-STATIC-out/gs-collections-RETU-STATIC_GroupBySetTest_groupBy_10000_keys_parallel_lazy_scala_retu_trial2.csv
