# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Warmup: 20 iterations, 2 s each
# Measurement: 10 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.gs.collections.impl.jmh.GroupBySetTest.groupBy_2_keys_serial_eager_scala

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 2
# Warmup Iteration   1: 6.862 ops/s
# Warmup Iteration   2: 11.404 ops/s
# Warmup Iteration   3: 11.937 ops/s
# Warmup Iteration   4: 10.511 ops/s
# Warmup Iteration   5: 11.732 ops/s
# Warmup Iteration   6: 12.457 ops/s
# Warmup Iteration   7: 11.215 ops/s
# Warmup Iteration   8: 8.876 ops/s
# Warmup Iteration   9: 11.366 ops/s
# Warmup Iteration  10: 12.463 ops/s
# Warmup Iteration  11: 9.997 ops/s
# Warmup Iteration  12: 10.730 ops/s
# Warmup Iteration  13: 11.968 ops/s
# Warmup Iteration  14: 11.098 ops/s
# Warmup Iteration  15: 10.612 ops/s
# Warmup Iteration  16: 12.298 ops/s
# Warmup Iteration  17: 10.773 ops/s
# Warmup Iteration  18: 12.022 ops/s
# Warmup Iteration  19: 12.502 ops/s
# Warmup Iteration  20: 12.486 ops/s
Iteration   1: 12.527 ops/s
Iteration   2: 12.456 ops/s
Iteration   3: 11.968 ops/s
Iteration   4: 12.282 ops/s
Iteration   5: 12.410 ops/s
Iteration   6: 12.390 ops/s
Iteration   7: 12.100 ops/s
Iteration   8: 12.160 ops/s
Iteration   9: 12.105 ops/s
Iteration  10: 12.386 ops/s

# Run progress: 50.00% complete, ETA 00:01:01
# Fork: 2 of 2
# Warmup Iteration   1: 7.901 ops/s
# Warmup Iteration   2: 11.282 ops/s
# Warmup Iteration   3: 12.055 ops/s
# Warmup Iteration   4: 9.145 ops/s
# Warmup Iteration   5: 10.401 ops/s
# Warmup Iteration   6: 11.430 ops/s
# Warmup Iteration   7: 12.092 ops/s
# Warmup Iteration   8: 10.132 ops/s
# Warmup Iteration   9: 11.251 ops/s
# Warmup Iteration  10: 12.314 ops/s
# Warmup Iteration  11: 12.300 ops/s
# Warmup Iteration  12: 12.170 ops/s
# Warmup Iteration  13: 12.302 ops/s
# Warmup Iteration  14: 11.478 ops/s
# Warmup Iteration  15: 11.213 ops/s
# Warmup Iteration  16: 11.816 ops/s
# Warmup Iteration  17: 12.140 ops/s
# Warmup Iteration  18: 12.256 ops/s
# Warmup Iteration  19: 12.303 ops/s
# Warmup Iteration  20: 11.644 ops/s
Iteration   1: 12.201 ops/s
Iteration   2: 11.623 ops/s
Iteration   3: 12.311 ops/s
Iteration   4: 12.287 ops/s
Iteration   5: 11.162 ops/s
Iteration   6: 11.903 ops/s
Iteration   7: 12.347 ops/s
Iteration   8: 12.233 ops/s
Iteration   9: 12.311 ops/s
Iteration  10: 12.271 ops/s


Result "com.gs.collections.impl.jmh.GroupBySetTest.groupBy_2_keys_serial_eager_scala":
  12.172 ±(99.9%) 0.275 ops/s [Average]
  (min, avg, max) = (11.162, 12.172, 12.527), stdev = 0.317
  CI (99.9%): [11.896, 12.447] (assumes normal distribution)


# Run complete. Total time: 00:02:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt   Score   Error  Units
GroupBySetTest.groupBy_2_keys_serial_eager_scala  thrpt   20  12.172 ± 0.275  ops/s

Benchmark result is saved to gs-collections/exp-RETU-STATIC-out/gs-collections-RETU-STATIC_GroupBySetTest_groupBy_2_keys_serial_eager_scala_retu_trial1.csv
