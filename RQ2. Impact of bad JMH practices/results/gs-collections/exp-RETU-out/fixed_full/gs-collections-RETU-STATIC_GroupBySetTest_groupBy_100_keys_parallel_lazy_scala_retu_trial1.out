# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Warmup: 20 iterations, 2 s each
# Measurement: 10 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.gs.collections.impl.jmh.GroupBySetTest.groupBy_100_keys_parallel_lazy_scala

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 2
# Warmup Iteration   1: 12.420 ops/s
# Warmup Iteration   2: 21.090 ops/s
# Warmup Iteration   3: 21.971 ops/s
# Warmup Iteration   4: 22.925 ops/s
# Warmup Iteration   5: 23.374 ops/s
# Warmup Iteration   6: 23.828 ops/s
# Warmup Iteration   7: 23.354 ops/s
# Warmup Iteration   8: 24.080 ops/s
# Warmup Iteration   9: 23.995 ops/s
# Warmup Iteration  10: 23.842 ops/s
# Warmup Iteration  11: 23.622 ops/s
# Warmup Iteration  12: 23.834 ops/s
# Warmup Iteration  13: 23.970 ops/s
# Warmup Iteration  14: 23.792 ops/s
# Warmup Iteration  15: 23.940 ops/s
# Warmup Iteration  16: 23.886 ops/s
# Warmup Iteration  17: 23.663 ops/s
# Warmup Iteration  18: 23.866 ops/s
# Warmup Iteration  19: 23.992 ops/s
# Warmup Iteration  20: 23.767 ops/s
Iteration   1: 23.821 ops/s
Iteration   2: 24.209 ops/s
Iteration   3: 23.825 ops/s
Iteration   4: 23.820 ops/s
Iteration   5: 23.627 ops/s
Iteration   6: 23.810 ops/s
Iteration   7: 23.996 ops/s
Iteration   8: 23.930 ops/s
Iteration   9: 23.812 ops/s
Iteration  10: 23.955 ops/s

# Run progress: 50.00% complete, ETA 00:01:01
# Fork: 2 of 2
# Warmup Iteration   1: 11.963 ops/s
# Warmup Iteration   2: 20.420 ops/s
# Warmup Iteration   3: 21.137 ops/s
# Warmup Iteration   4: 22.430 ops/s
# Warmup Iteration   5: 22.038 ops/s
# Warmup Iteration   6: 22.411 ops/s
# Warmup Iteration   7: 22.954 ops/s
# Warmup Iteration   8: 22.380 ops/s
# Warmup Iteration   9: 22.580 ops/s
# Warmup Iteration  10: 22.752 ops/s
# Warmup Iteration  11: 22.470 ops/s
# Warmup Iteration  12: 22.771 ops/s
# Warmup Iteration  13: 22.389 ops/s
# Warmup Iteration  14: 22.801 ops/s
# Warmup Iteration  15: 22.917 ops/s
# Warmup Iteration  16: 23.073 ops/s
# Warmup Iteration  17: 22.831 ops/s
# Warmup Iteration  18: 22.465 ops/s
# Warmup Iteration  19: 22.686 ops/s
# Warmup Iteration  20: 22.486 ops/s
Iteration   1: 22.853 ops/s
Iteration   2: 22.322 ops/s
Iteration   3: 22.619 ops/s
Iteration   4: 22.440 ops/s
Iteration   5: 22.918 ops/s
Iteration   6: 22.738 ops/s
Iteration   7: 22.451 ops/s
Iteration   8: 22.777 ops/s
Iteration   9: 22.717 ops/s
Iteration  10: 22.768 ops/s


Result "com.gs.collections.impl.jmh.GroupBySetTest.groupBy_100_keys_parallel_lazy_scala":
  23.270 ±(99.9%) 0.564 ops/s [Average]
  (min, avg, max) = (22.322, 23.270, 24.209), stdev = 0.649
  CI (99.9%): [22.707, 23.834] (assumes normal distribution)


# Run complete. Total time: 00:02:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt   Score   Error  Units
GroupBySetTest.groupBy_100_keys_parallel_lazy_scala  thrpt   20  23.270 ± 0.564  ops/s

Benchmark result is saved to gs-collections/exp-RETU-STATIC-out/gs-collections-RETU-STATIC_GroupBySetTest_groupBy_100_keys_parallel_lazy_scala_retu_trial1.csv
