# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Warmup: 20 iterations, 2 s each
# Measurement: 10 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.gs.collections.impl.jmh.GroupBySetTest.groupBy_10000_keys_serial_eager_scala

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 2
# Warmup Iteration   1: 3.356 ops/s
# Warmup Iteration   2: 5.236 ops/s
# Warmup Iteration   3: 5.380 ops/s
# Warmup Iteration   4: 5.279 ops/s
# Warmup Iteration   5: 4.737 ops/s
# Warmup Iteration   6: 4.237 ops/s
# Warmup Iteration   7: 5.351 ops/s
# Warmup Iteration   8: 5.162 ops/s
# Warmup Iteration   9: 5.021 ops/s
# Warmup Iteration  10: 5.075 ops/s
# Warmup Iteration  11: 5.540 ops/s
# Warmup Iteration  12: 5.556 ops/s
# Warmup Iteration  13: 5.544 ops/s
# Warmup Iteration  14: 5.547 ops/s
# Warmup Iteration  15: 5.562 ops/s
# Warmup Iteration  16: 5.511 ops/s
# Warmup Iteration  17: 4.787 ops/s
# Warmup Iteration  18: 4.937 ops/s
# Warmup Iteration  19: 5.061 ops/s
# Warmup Iteration  20: 5.297 ops/s
Iteration   1: 5.557 ops/s
Iteration   2: 5.561 ops/s
Iteration   3: 5.557 ops/s
Iteration   4: 5.564 ops/s
Iteration   5: 5.578 ops/s
Iteration   6: 5.541 ops/s
Iteration   7: 5.543 ops/s
Iteration   8: 5.067 ops/s
Iteration   9: 5.334 ops/s
Iteration  10: 5.555 ops/s

# Run progress: 50.00% complete, ETA 00:01:04
# Fork: 2 of 2
# Warmup Iteration   1: 3.820 ops/s
# Warmup Iteration   2: 5.563 ops/s
# Warmup Iteration   3: 5.759 ops/s
# Warmup Iteration   4: 5.456 ops/s
# Warmup Iteration   5: 5.751 ops/s
# Warmup Iteration   6: 5.741 ops/s
# Warmup Iteration   7: 5.842 ops/s
# Warmup Iteration   8: 5.428 ops/s
# Warmup Iteration   9: 5.276 ops/s
# Warmup Iteration  10: 5.799 ops/s
# Warmup Iteration  11: 5.045 ops/s
# Warmup Iteration  12: 5.734 ops/s
# Warmup Iteration  13: 5.815 ops/s
# Warmup Iteration  14: 5.817 ops/s
# Warmup Iteration  15: 5.827 ops/s
# Warmup Iteration  16: 5.385 ops/s
# Warmup Iteration  17: 5.283 ops/s
# Warmup Iteration  18: 5.291 ops/s
# Warmup Iteration  19: 5.576 ops/s
# Warmup Iteration  20: 5.819 ops/s
Iteration   1: 5.828 ops/s
Iteration   2: 5.817 ops/s
Iteration   3: 5.809 ops/s
Iteration   4: 5.845 ops/s
Iteration   5: 5.833 ops/s
Iteration   6: 5.821 ops/s
Iteration   7: 5.825 ops/s
Iteration   8: 5.806 ops/s
Iteration   9: 5.831 ops/s
Iteration  10: 5.378 ops/s


Result "com.gs.collections.impl.jmh.GroupBySetTest.groupBy_10000_keys_serial_eager_scala":
  5.633 ±(99.9%) 0.184 ops/s [Average]
  (min, avg, max) = (5.067, 5.633, 5.845), stdev = 0.212
  CI (99.9%): [5.449, 5.816] (assumes normal distribution)


# Run complete. Total time: 00:02:07

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt  Score   Error  Units
GroupBySetTest.groupBy_10000_keys_serial_eager_scala  thrpt   20  5.633 ± 0.184  ops/s

Benchmark result is saved to gs-collections/exp-RETU-STATIC-out/gs-collections-RETU-STATIC_GroupBySetTest_groupBy_10000_keys_serial_eager_scala_retu_trial1.csv
