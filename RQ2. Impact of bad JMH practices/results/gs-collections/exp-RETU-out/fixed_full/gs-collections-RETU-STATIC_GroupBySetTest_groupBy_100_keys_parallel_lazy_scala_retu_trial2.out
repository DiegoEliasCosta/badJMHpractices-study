# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Warmup: 20 iterations, 2 s each
# Measurement: 10 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.gs.collections.impl.jmh.GroupBySetTest.groupBy_100_keys_parallel_lazy_scala

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 2
# Warmup Iteration   1: 12.982 ops/s
# Warmup Iteration   2: 21.353 ops/s
# Warmup Iteration   3: 22.438 ops/s
# Warmup Iteration   4: 22.834 ops/s
# Warmup Iteration   5: 23.209 ops/s
# Warmup Iteration   6: 23.682 ops/s
# Warmup Iteration   7: 23.029 ops/s
# Warmup Iteration   8: 24.382 ops/s
# Warmup Iteration   9: 23.884 ops/s
# Warmup Iteration  10: 24.005 ops/s
# Warmup Iteration  11: 23.419 ops/s
# Warmup Iteration  12: 23.576 ops/s
# Warmup Iteration  13: 23.990 ops/s
# Warmup Iteration  14: 23.641 ops/s
# Warmup Iteration  15: 23.867 ops/s
# Warmup Iteration  16: 23.955 ops/s
# Warmup Iteration  17: 23.774 ops/s
# Warmup Iteration  18: 23.991 ops/s
# Warmup Iteration  19: 23.873 ops/s
# Warmup Iteration  20: 23.740 ops/s
Iteration   1: 24.253 ops/s
Iteration   2: 23.970 ops/s
Iteration   3: 23.797 ops/s
Iteration   4: 23.732 ops/s
Iteration   5: 23.795 ops/s
Iteration   6: 23.487 ops/s
Iteration   7: 23.632 ops/s
Iteration   8: 23.876 ops/s
Iteration   9: 23.851 ops/s
Iteration  10: 23.696 ops/s

# Run progress: 50.00% complete, ETA 00:01:01
# Fork: 2 of 2
# Warmup Iteration   1: 11.962 ops/s
# Warmup Iteration   2: 19.907 ops/s
# Warmup Iteration   3: 20.330 ops/s
# Warmup Iteration   4: 20.560 ops/s
# Warmup Iteration   5: 20.316 ops/s
# Warmup Iteration   6: 20.914 ops/s
# Warmup Iteration   7: 21.355 ops/s
# Warmup Iteration   8: 20.977 ops/s
# Warmup Iteration   9: 21.332 ops/s
# Warmup Iteration  10: 20.871 ops/s
# Warmup Iteration  11: 21.162 ops/s
# Warmup Iteration  12: 21.728 ops/s
# Warmup Iteration  13: 21.323 ops/s
# Warmup Iteration  14: 21.586 ops/s
# Warmup Iteration  15: 21.565 ops/s
# Warmup Iteration  16: 21.590 ops/s
# Warmup Iteration  17: 21.327 ops/s
# Warmup Iteration  18: 21.245 ops/s
# Warmup Iteration  19: 21.329 ops/s
# Warmup Iteration  20: 21.261 ops/s
Iteration   1: 21.394 ops/s
Iteration   2: 21.437 ops/s
Iteration   3: 21.498 ops/s
Iteration   4: 21.248 ops/s
Iteration   5: 21.273 ops/s
Iteration   6: 21.544 ops/s
Iteration   7: 21.260 ops/s
Iteration   8: 21.160 ops/s
Iteration   9: 21.256 ops/s
Iteration  10: 21.391 ops/s


Result "com.gs.collections.impl.jmh.GroupBySetTest.groupBy_100_keys_parallel_lazy_scala":
  22.578 ±(99.9%) 1.106 ops/s [Average]
  (min, avg, max) = (21.160, 22.578, 24.253), stdev = 1.274
  CI (99.9%): [21.471, 23.684] (assumes normal distribution)


# Run complete. Total time: 00:02:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt   Score   Error  Units
GroupBySetTest.groupBy_100_keys_parallel_lazy_scala  thrpt   20  22.578 ± 1.106  ops/s

Benchmark result is saved to gs-collections/exp-RETU-STATIC-out/gs-collections-RETU-STATIC_GroupBySetTest_groupBy_100_keys_parallel_lazy_scala_retu_trial2.csv
