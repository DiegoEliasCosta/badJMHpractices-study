# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Warmup: 20 iterations, 2 s each
# Measurement: 10 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.gs.collections.impl.jmh.GroupBySetTest.groupBy_10000_keys_serial_lazy_scala

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 2
# Warmup Iteration   1: 4.954 ops/s
# Warmup Iteration   2: 7.350 ops/s
# Warmup Iteration   3: 7.221 ops/s
# Warmup Iteration   4: 7.435 ops/s
# Warmup Iteration   5: 7.310 ops/s
# Warmup Iteration   6: 7.149 ops/s
# Warmup Iteration   7: 6.683 ops/s
# Warmup Iteration   8: 7.543 ops/s
# Warmup Iteration   9: 7.857 ops/s
# Warmup Iteration  10: 7.809 ops/s
# Warmup Iteration  11: 7.838 ops/s
# Warmup Iteration  12: 7.802 ops/s
# Warmup Iteration  13: 7.006 ops/s
# Warmup Iteration  14: 6.402 ops/s
# Warmup Iteration  15: 7.061 ops/s
# Warmup Iteration  16: 7.840 ops/s
# Warmup Iteration  17: 7.828 ops/s
# Warmup Iteration  18: 7.832 ops/s
# Warmup Iteration  19: 7.235 ops/s
# Warmup Iteration  20: 7.789 ops/s
Iteration   1: 7.856 ops/s
Iteration   2: 7.846 ops/s
Iteration   3: 7.846 ops/s
Iteration   4: 7.847 ops/s
Iteration   5: 7.131 ops/s
Iteration   6: 7.300 ops/s
Iteration   7: 7.858 ops/s
Iteration   8: 7.828 ops/s
Iteration   9: 7.834 ops/s
Iteration  10: 7.836 ops/s

# Run progress: 50.00% complete, ETA 00:01:02
# Fork: 2 of 2
# Warmup Iteration   1: 5.813 ops/s
# Warmup Iteration   2: 7.586 ops/s
# Warmup Iteration   3: 7.525 ops/s
# Warmup Iteration   4: 7.806 ops/s
# Warmup Iteration   5: 7.858 ops/s
# Warmup Iteration   6: 7.510 ops/s
# Warmup Iteration   7: 7.246 ops/s
# Warmup Iteration   8: 7.995 ops/s
# Warmup Iteration   9: 7.988 ops/s
# Warmup Iteration  10: 7.961 ops/s
# Warmup Iteration  11: 7.998 ops/s
# Warmup Iteration  12: 7.495 ops/s
# Warmup Iteration  13: 7.075 ops/s
# Warmup Iteration  14: 6.776 ops/s
# Warmup Iteration  15: 7.426 ops/s
# Warmup Iteration  16: 6.884 ops/s
# Warmup Iteration  17: 7.981 ops/s
# Warmup Iteration  18: 7.251 ops/s
# Warmup Iteration  19: 7.962 ops/s
# Warmup Iteration  20: 7.999 ops/s
Iteration   1: 7.560 ops/s
Iteration   2: 7.991 ops/s
Iteration   3: 7.717 ops/s
Iteration   4: 7.688 ops/s
Iteration   5: 7.096 ops/s
Iteration   6: 7.572 ops/s
Iteration   7: 8.011 ops/s
Iteration   8: 8.003 ops/s
Iteration   9: 7.989 ops/s
Iteration  10: 7.981 ops/s


Result "com.gs.collections.impl.jmh.GroupBySetTest.groupBy_10000_keys_serial_lazy_scala":
  7.740 ±(99.9%) 0.240 ops/s [Average]
  (min, avg, max) = (7.096, 7.740, 8.011), stdev = 0.277
  CI (99.9%): [7.499, 7.980] (assumes normal distribution)


# Run complete. Total time: 00:02:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt  Score   Error  Units
GroupBySetTest.groupBy_10000_keys_serial_lazy_scala  thrpt   20  7.740 ± 0.240  ops/s

Benchmark result is saved to gs-collections/exp-RETU-STATIC-out/gs-collections-RETU-STATIC_GroupBySetTest_groupBy_10000_keys_serial_lazy_scala_retu_trial1.csv
