# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Warmup: 20 iterations, 2 s each
# Measurement: 10 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.gs.collections.impl.jmh.GroupBySetTest.groupBy_2_keys_serial_eager_scala

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 2
# Warmup Iteration   1: 7.097 ops/s
# Warmup Iteration   2: 11.178 ops/s
# Warmup Iteration   3: 11.951 ops/s
# Warmup Iteration   4: 9.837 ops/s
# Warmup Iteration   5: 11.147 ops/s
# Warmup Iteration   6: 11.926 ops/s
# Warmup Iteration   7: 11.857 ops/s
# Warmup Iteration   8: 9.950 ops/s
# Warmup Iteration   9: 11.059 ops/s
# Warmup Iteration  10: 12.087 ops/s
# Warmup Iteration  11: 12.081 ops/s
# Warmup Iteration  12: 12.010 ops/s
# Warmup Iteration  13: 11.470 ops/s
# Warmup Iteration  14: 11.475 ops/s
# Warmup Iteration  15: 9.824 ops/s
# Warmup Iteration  16: 12.088 ops/s
# Warmup Iteration  17: 12.105 ops/s
# Warmup Iteration  18: 11.970 ops/s
# Warmup Iteration  19: 11.637 ops/s
# Warmup Iteration  20: 12.088 ops/s
Iteration   1: 12.037 ops/s
Iteration   2: 11.182 ops/s
Iteration   3: 12.065 ops/s
Iteration   4: 12.107 ops/s
Iteration   5: 11.060 ops/s
Iteration   6: 11.798 ops/s
Iteration   7: 11.385 ops/s
Iteration   8: 11.198 ops/s
Iteration   9: 12.066 ops/s
Iteration  10: 12.091 ops/s

# Run progress: 50.00% complete, ETA 00:01:02
# Fork: 2 of 2
# Warmup Iteration   1: 7.862 ops/s
# Warmup Iteration   2: 10.942 ops/s
# Warmup Iteration   3: 12.075 ops/s
# Warmup Iteration   4: 10.290 ops/s
# Warmup Iteration   5: 11.870 ops/s
# Warmup Iteration   6: 11.608 ops/s
# Warmup Iteration   7: 11.751 ops/s
# Warmup Iteration   8: 10.027 ops/s
# Warmup Iteration   9: 11.106 ops/s
# Warmup Iteration  10: 11.926 ops/s
# Warmup Iteration  11: 12.179 ops/s
# Warmup Iteration  12: 12.269 ops/s
# Warmup Iteration  13: 12.301 ops/s
# Warmup Iteration  14: 11.068 ops/s
# Warmup Iteration  15: 11.448 ops/s
# Warmup Iteration  16: 12.302 ops/s
# Warmup Iteration  17: 11.606 ops/s
# Warmup Iteration  18: 12.157 ops/s
# Warmup Iteration  19: 12.279 ops/s
# Warmup Iteration  20: 12.271 ops/s
Iteration   1: 12.290 ops/s
Iteration   2: 10.383 ops/s
Iteration   3: 12.320 ops/s
Iteration   4: 12.290 ops/s
Iteration   5: 12.238 ops/s
Iteration   6: 12.271 ops/s
Iteration   7: 12.313 ops/s
Iteration   8: 12.270 ops/s
Iteration   9: 11.840 ops/s
Iteration  10: 11.137 ops/s


Result "com.gs.collections.impl.jmh.GroupBySetTest.groupBy_2_keys_serial_eager_scala":
  11.817 ±(99.9%) 0.485 ops/s [Average]
  (min, avg, max) = (10.383, 11.817, 12.320), stdev = 0.559
  CI (99.9%): [11.332, 12.302] (assumes normal distribution)


# Run complete. Total time: 00:02:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt   Score   Error  Units
GroupBySetTest.groupBy_2_keys_serial_eager_scala  thrpt   20  11.817 ± 0.485  ops/s

Benchmark result is saved to gs-collections/exp-RETU-STATIC-out/gs-collections-RETU-STATIC_GroupBySetTest_groupBy_2_keys_serial_eager_scala_retu_trial2.csv
