# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Warmup: 20 iterations, 2 s each
# Measurement: 10 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.gs.collections.impl.jmh.GroupBySetTest.groupBy_10000_keys_serial_lazy_scala

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 2
# Warmup Iteration   1: 4.962 ops/s
# Warmup Iteration   2: 7.630 ops/s
# Warmup Iteration   3: 7.771 ops/s
# Warmup Iteration   4: 7.847 ops/s
# Warmup Iteration   5: 7.998 ops/s
# Warmup Iteration   6: 7.750 ops/s
# Warmup Iteration   7: 7.271 ops/s
# Warmup Iteration   8: 7.757 ops/s
# Warmup Iteration   9: 8.147 ops/s
# Warmup Iteration  10: 8.116 ops/s
# Warmup Iteration  11: 8.142 ops/s
# Warmup Iteration  12: 6.943 ops/s
# Warmup Iteration  13: 7.189 ops/s
# Warmup Iteration  14: 7.171 ops/s
# Warmup Iteration  15: 7.282 ops/s
# Warmup Iteration  16: 7.262 ops/s
# Warmup Iteration  17: 7.972 ops/s
# Warmup Iteration  18: 7.543 ops/s
# Warmup Iteration  19: 7.888 ops/s
# Warmup Iteration  20: 8.147 ops/s
Iteration   1: 8.139 ops/s
Iteration   2: 8.150 ops/s
Iteration   3: 8.146 ops/s
Iteration   4: 7.493 ops/s
Iteration   5: 7.469 ops/s
Iteration   6: 7.968 ops/s
Iteration   7: 7.966 ops/s
Iteration   8: 8.133 ops/s
Iteration   9: 8.136 ops/s
Iteration  10: 8.101 ops/s

# Run progress: 50.00% complete, ETA 00:01:02
# Fork: 2 of 2
# Warmup Iteration   1: 5.750 ops/s
# Warmup Iteration   2: 7.039 ops/s
# Warmup Iteration   3: 7.542 ops/s
# Warmup Iteration   4: 7.964 ops/s
# Warmup Iteration   5: 8.011 ops/s
# Warmup Iteration   6: 7.638 ops/s
# Warmup Iteration   7: 7.375 ops/s
# Warmup Iteration   8: 8.151 ops/s
# Warmup Iteration   9: 8.101 ops/s
# Warmup Iteration  10: 8.169 ops/s
# Warmup Iteration  11: 8.147 ops/s
# Warmup Iteration  12: 7.434 ops/s
# Warmup Iteration  13: 7.217 ops/s
# Warmup Iteration  14: 7.401 ops/s
# Warmup Iteration  15: 7.940 ops/s
# Warmup Iteration  16: 7.824 ops/s
# Warmup Iteration  17: 8.129 ops/s
# Warmup Iteration  18: 8.134 ops/s
# Warmup Iteration  19: 8.120 ops/s
# Warmup Iteration  20: 8.144 ops/s
Iteration   1: 7.731 ops/s
Iteration   2: 8.138 ops/s
Iteration   3: 7.992 ops/s
Iteration   4: 6.720 ops/s
Iteration   5: 7.916 ops/s
Iteration   6: 8.111 ops/s
Iteration   7: 8.116 ops/s
Iteration   8: 8.129 ops/s
Iteration   9: 8.103 ops/s
Iteration  10: 8.077 ops/s


Result "com.gs.collections.impl.jmh.GroupBySetTest.groupBy_10000_keys_serial_lazy_scala":
  7.937 ±(99.9%) 0.306 ops/s [Average]
  (min, avg, max) = (6.720, 7.937, 8.150), stdev = 0.353
  CI (99.9%): [7.630, 8.243] (assumes normal distribution)


# Run complete. Total time: 00:02:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt  Score   Error  Units
GroupBySetTest.groupBy_10000_keys_serial_lazy_scala  thrpt   20  7.937 ± 0.306  ops/s

Benchmark result is saved to gs-collections/exp-RETU-STATIC-out/gs-collections-RETU-STATIC_GroupBySetTest_groupBy_10000_keys_serial_lazy_scala_retu_trial2.csv
