# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Warmup: 20 iterations, 2 s each
# Measurement: 10 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.gs.collections.impl.jmh.GroupBySetTest.groupBy_100_keys_serial_eager_scala

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 2
# Warmup Iteration   1: 4.718 ops/s
# Warmup Iteration   2: 7.021 ops/s
# Warmup Iteration   3: 7.298 ops/s
# Warmup Iteration   4: 6.254 ops/s
# Warmup Iteration   5: 7.357 ops/s
# Warmup Iteration   6: 6.963 ops/s
# Warmup Iteration   7: 6.409 ops/s
# Warmup Iteration   8: 6.797 ops/s
# Warmup Iteration   9: 6.974 ops/s
# Warmup Iteration  10: 6.956 ops/s
# Warmup Iteration  11: 6.966 ops/s
# Warmup Iteration  12: 6.968 ops/s
# Warmup Iteration  13: 6.500 ops/s
# Warmup Iteration  14: 6.258 ops/s
# Warmup Iteration  15: 6.250 ops/s
# Warmup Iteration  16: 6.903 ops/s
# Warmup Iteration  17: 6.971 ops/s
# Warmup Iteration  18: 6.982 ops/s
# Warmup Iteration  19: 6.964 ops/s
# Warmup Iteration  20: 6.969 ops/s
Iteration   1: 6.956 ops/s
Iteration   2: 6.976 ops/s
Iteration   3: 6.982 ops/s
Iteration   4: 6.988 ops/s
Iteration   5: 6.978 ops/s
Iteration   6: 6.505 ops/s
Iteration   7: 6.009 ops/s
Iteration   8: 6.153 ops/s
Iteration   9: 6.279 ops/s
Iteration  10: 6.975 ops/s

# Run progress: 50.00% complete, ETA 00:01:02
# Fork: 2 of 2
# Warmup Iteration   1: 5.235 ops/s
# Warmup Iteration   2: 6.969 ops/s
# Warmup Iteration   3: 7.222 ops/s
# Warmup Iteration   4: 7.235 ops/s
# Warmup Iteration   5: 7.395 ops/s
# Warmup Iteration   6: 7.287 ops/s
# Warmup Iteration   7: 6.617 ops/s
# Warmup Iteration   8: 6.993 ops/s
# Warmup Iteration   9: 6.786 ops/s
# Warmup Iteration  10: 7.020 ops/s
# Warmup Iteration  11: 7.023 ops/s
# Warmup Iteration  12: 6.891 ops/s
# Warmup Iteration  13: 6.295 ops/s
# Warmup Iteration  14: 6.305 ops/s
# Warmup Iteration  15: 6.585 ops/s
# Warmup Iteration  16: 7.041 ops/s
# Warmup Iteration  17: 6.601 ops/s
# Warmup Iteration  18: 6.993 ops/s
# Warmup Iteration  19: 7.022 ops/s
# Warmup Iteration  20: 6.705 ops/s
Iteration   1: 6.541 ops/s
Iteration   2: 7.042 ops/s
Iteration   3: 7.040 ops/s
Iteration   4: 7.020 ops/s
Iteration   5: 6.989 ops/s
Iteration   6: 7.027 ops/s
Iteration   7: 7.035 ops/s
Iteration   8: 6.723 ops/s
Iteration   9: 7.025 ops/s
Iteration  10: 7.031 ops/s


Result "com.gs.collections.impl.jmh.GroupBySetTest.groupBy_100_keys_serial_eager_scala":
  6.814 ±(99.9%) 0.287 ops/s [Average]
  (min, avg, max) = (6.009, 6.814, 7.042), stdev = 0.330
  CI (99.9%): [6.527, 7.100] (assumes normal distribution)


# Run complete. Total time: 00:02:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt  Score   Error  Units
GroupBySetTest.groupBy_100_keys_serial_eager_scala  thrpt   20  6.814 ± 0.287  ops/s

Benchmark result is saved to gs-collections/exp-RETU-STATIC-out/gs-collections-RETU-STATIC_GroupBySetTest_groupBy_100_keys_serial_eager_scala_retu_trial2.csv
