# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.gs.collections.impl.jmh.BagAddAllTest.gsc

# Run progress: 0.00% complete, ETA 00:16:40
# Fork: 1 of 5
# Warmup Iteration   1: 92.989 ops/s
# Warmup Iteration   2: 98.060 ops/s
# Warmup Iteration   3: 96.251 ops/s
# Warmup Iteration   4: 94.547 ops/s
# Warmup Iteration   5: 93.954 ops/s
Iteration   1: 100.841 ops/s
Iteration   2: 99.811 ops/s
Iteration   3: 100.974 ops/s
Iteration   4: 100.987 ops/s
Iteration   5: 98.464 ops/s

# Run progress: 10.00% complete, ETA 00:15:04
# Fork: 2 of 5
# Warmup Iteration   1: 97.602 ops/s
# Warmup Iteration   2: 98.311 ops/s
# Warmup Iteration   3: 98.630 ops/s
# Warmup Iteration   4: 97.232 ops/s
# Warmup Iteration   5: 98.703 ops/s
Iteration   1: 94.593 ops/s
Iteration   2: 98.339 ops/s
Iteration   3: 98.060 ops/s
Iteration   4: 99.846 ops/s
Iteration   5: 99.829 ops/s

# Run progress: 20.00% complete, ETA 00:13:23
# Fork: 3 of 5
# Warmup Iteration   1: 97.597 ops/s
# Warmup Iteration   2: 99.689 ops/s
# Warmup Iteration   3: 97.778 ops/s
# Warmup Iteration   4: 89.423 ops/s
# Warmup Iteration   5: 91.731 ops/s
Iteration   1: 98.792 ops/s
Iteration   2: 88.662 ops/s
Iteration   3: 94.596 ops/s
Iteration   4: 94.665 ops/s
Iteration   5: 92.886 ops/s

# Run progress: 30.00% complete, ETA 00:11:42
# Fork: 4 of 5
# Warmup Iteration   1: 99.478 ops/s
# Warmup Iteration   2: 98.020 ops/s
# Warmup Iteration   3: 99.598 ops/s
# Warmup Iteration   4: 94.639 ops/s
# Warmup Iteration   5: 98.968 ops/s
Iteration   1: 100.938 ops/s
Iteration   2: 98.782 ops/s
Iteration   3: 100.953 ops/s
Iteration   4: 100.219 ops/s
Iteration   5: 100.286 ops/s

# Run progress: 40.00% complete, ETA 00:10:02
# Fork: 5 of 5
# Warmup Iteration   1: 98.481 ops/s
# Warmup Iteration   2: 94.307 ops/s
# Warmup Iteration   3: 98.417 ops/s
# Warmup Iteration   4: 97.142 ops/s
# Warmup Iteration   5: 94.819 ops/s
Iteration   1: 99.920 ops/s
Iteration   2: 99.092 ops/s
Iteration   3: 94.822 ops/s
Iteration   4: 98.134 ops/s
Iteration   5: 100.971 ops/s


Result "com.gs.collections.impl.jmh.BagAddAllTest.gsc":
  98.219 ±(99.9%) 2.345 ops/s [Average]
  (min, avg, max) = (88.662, 98.219, 100.987), stdev = 3.131
  CI (99.9%): [95.873, 100.564] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.gs.collections.impl.jmh.BagAddAllTest.guava

# Run progress: 50.00% complete, ETA 00:08:22
# Fork: 1 of 5
# Warmup Iteration   1: 47.822 ops/s
# Warmup Iteration   2: 48.487 ops/s
# Warmup Iteration   3: 48.579 ops/s
# Warmup Iteration   4: 48.320 ops/s
# Warmup Iteration   5: 48.498 ops/s
Iteration   1: 48.401 ops/s
Iteration   2: 48.552 ops/s
Iteration   3: 48.528 ops/s
Iteration   4: 48.538 ops/s
Iteration   5: 48.539 ops/s

# Run progress: 60.00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 49.733 ops/s
# Warmup Iteration   2: 50.145 ops/s
# Warmup Iteration   3: 50.119 ops/s
# Warmup Iteration   4: 49.898 ops/s
# Warmup Iteration   5: 50.148 ops/s
Iteration   1: 49.975 ops/s
Iteration   2: 50.128 ops/s
Iteration   3: 50.155 ops/s
Iteration   4: 49.994 ops/s
Iteration   5: 50.123 ops/s

# Run progress: 70.00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 48.064 ops/s
# Warmup Iteration   2: 48.478 ops/s
# Warmup Iteration   3: 48.561 ops/s
# Warmup Iteration   4: 48.356 ops/s
# Warmup Iteration   5: 48.417 ops/s
Iteration   1: 48.467 ops/s
Iteration   2: 48.542 ops/s
Iteration   3: 48.468 ops/s
Iteration   4: 48.524 ops/s
Iteration   5: 48.484 ops/s

# Run progress: 80.00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 46.577 ops/s
# Warmup Iteration   2: 46.743 ops/s
# Warmup Iteration   3: 46.774 ops/s
# Warmup Iteration   4: 46.722 ops/s
# Warmup Iteration   5: 46.683 ops/s
Iteration   1: 46.701 ops/s
Iteration   2: 46.774 ops/s
Iteration   3: 46.659 ops/s
Iteration   4: 46.750 ops/s
Iteration   5: 46.762 ops/s

# Run progress: 90.00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 49.716 ops/s
# Warmup Iteration   2: 50.227 ops/s
# Warmup Iteration   3: 50.214 ops/s
# Warmup Iteration   4: 50.151 ops/s
# Warmup Iteration   5: 50.160 ops/s
Iteration   1: 50.181 ops/s
Iteration   2: 50.052 ops/s
Iteration   3: 50.214 ops/s
Iteration   4: 50.197 ops/s
Iteration   5: 50.137 ops/s


Result "com.gs.collections.impl.jmh.BagAddAllTest.guava":
  48.794 ±(99.9%) 0.964 ops/s [Average]
  (min, avg, max) = (46.659, 48.794, 50.214), stdev = 1.286
  CI (99.9%): [47.830, 49.757] (assumes normal distribution)


# Run complete. Total time: 00:16:44

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark             Mode  Cnt   Score   Error  Units
BagAddAllTest.gsc    thrpt   25  98.219 ± 2.345  ops/s
BagAddAllTest.guava  thrpt   25  48.794 ± 0.964  ops/s

Benchmark result is saved to gs-collections/exp-RETU-out-jdk8/gs-collections-RETU-DEAD_BagAddAllTest_retu_trial1.csv
