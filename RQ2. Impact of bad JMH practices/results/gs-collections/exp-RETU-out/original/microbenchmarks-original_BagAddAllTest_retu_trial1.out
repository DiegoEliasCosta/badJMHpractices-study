# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.gs.collections.impl.jmh.BagAddAllTest.gsc

# Run progress: 0.00% complete, ETA 00:16:40
# Fork: 1 of 5
# Warmup Iteration   1: 94.834 ops/s
# Warmup Iteration   2: 100.156 ops/s
# Warmup Iteration   3: 100.254 ops/s
# Warmup Iteration   4: 98.849 ops/s
# Warmup Iteration   5: 98.916 ops/s
Iteration   1: 98.263 ops/s
Iteration   2: 97.743 ops/s
Iteration   3: 98.044 ops/s
Iteration   4: 97.232 ops/s
Iteration   5: 99.897 ops/s

# Run progress: 10.00% complete, ETA 00:15:04
# Fork: 2 of 5
# Warmup Iteration   1: 98.270 ops/s
# Warmup Iteration   2: 98.376 ops/s
# Warmup Iteration   3: 91.052 ops/s
# Warmup Iteration   4: 93.464 ops/s
# Warmup Iteration   5: 98.196 ops/s
Iteration   1: 100.839 ops/s
Iteration   2: 100.923 ops/s
Iteration   3: 94.249 ops/s
Iteration   4: 100.885 ops/s
Iteration   5: 95.212 ops/s

# Run progress: 20.00% complete, ETA 00:13:23
# Fork: 3 of 5
# Warmup Iteration   1: 91.122 ops/s
# Warmup Iteration   2: 96.421 ops/s
# Warmup Iteration   3: 98.569 ops/s
# Warmup Iteration   4: 98.344 ops/s
# Warmup Iteration   5: 99.642 ops/s
Iteration   1: 99.263 ops/s
Iteration   2: 99.636 ops/s
Iteration   3: 96.078 ops/s
Iteration   4: 94.434 ops/s
Iteration   5: 100.902 ops/s

# Run progress: 30.00% complete, ETA 00:11:43
# Fork: 4 of 5
# Warmup Iteration   1: 97.374 ops/s
# Warmup Iteration   2: 97.567 ops/s
# Warmup Iteration   3: 98.762 ops/s
# Warmup Iteration   4: 99.678 ops/s
# Warmup Iteration   5: 94.713 ops/s
Iteration   1: 91.334 ops/s
Iteration   2: 100.491 ops/s
Iteration   3: 99.797 ops/s
Iteration   4: 92.430 ops/s
Iteration   5: 98.634 ops/s

# Run progress: 40.00% complete, ETA 00:10:02
# Fork: 5 of 5
# Warmup Iteration   1: 98.688 ops/s
# Warmup Iteration   2: 86.849 ops/s
# Warmup Iteration   3: 89.357 ops/s
# Warmup Iteration   4: 96.749 ops/s
# Warmup Iteration   5: 98.862 ops/s
Iteration   1: 92.909 ops/s
Iteration   2: 97.296 ops/s
Iteration   3: 100.655 ops/s
Iteration   4: 100.626 ops/s
Iteration   5: 99.487 ops/s


Result "com.gs.collections.impl.jmh.BagAddAllTest.gsc":
  97.890 ±(99.9%) 2.204 ops/s [Average]
  (min, avg, max) = (91.334, 97.890, 100.923), stdev = 2.942
  CI (99.9%): [95.686, 100.094] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.gs.collections.impl.jmh.BagAddAllTest.guava

# Run progress: 50.00% complete, ETA 00:08:22
# Fork: 1 of 5
# Warmup Iteration   1: 47.244 ops/s
# Warmup Iteration   2: 48.535 ops/s
# Warmup Iteration   3: 48.341 ops/s
# Warmup Iteration   4: 48.493 ops/s
# Warmup Iteration   5: 48.520 ops/s
Iteration   1: 48.524 ops/s
Iteration   2: 48.533 ops/s
Iteration   3: 48.554 ops/s
Iteration   4: 48.374 ops/s
Iteration   5: 48.498 ops/s

# Run progress: 60.00% complete, ETA 00:06:41
# Fork: 2 of 5
# Warmup Iteration   1: 48.152 ops/s
# Warmup Iteration   2: 48.698 ops/s
# Warmup Iteration   3: 48.689 ops/s
# Warmup Iteration   4: 48.692 ops/s
# Warmup Iteration   5: 48.586 ops/s
Iteration   1: 48.726 ops/s
Iteration   2: 48.740 ops/s
Iteration   3: 48.598 ops/s
Iteration   4: 48.752 ops/s
Iteration   5: 48.794 ops/s

# Run progress: 70.00% complete, ETA 00:05:01
# Fork: 3 of 5
# Warmup Iteration   1: 49.494 ops/s
# Warmup Iteration   2: 50.101 ops/s
# Warmup Iteration   3: 50.093 ops/s
# Warmup Iteration   4: 49.946 ops/s
# Warmup Iteration   5: 50.002 ops/s
Iteration   1: 49.996 ops/s
Iteration   2: 49.784 ops/s
Iteration   3: 49.931 ops/s
Iteration   4: 50.062 ops/s
Iteration   5: 50.125 ops/s

# Run progress: 80.00% complete, ETA 00:03:20
# Fork: 4 of 5
# Warmup Iteration   1: 47.942 ops/s
# Warmup Iteration   2: 48.343 ops/s
# Warmup Iteration   3: 48.560 ops/s
# Warmup Iteration   4: 48.429 ops/s
# Warmup Iteration   5: 48.425 ops/s
Iteration   1: 48.325 ops/s
Iteration   2: 48.460 ops/s
Iteration   3: 48.580 ops/s
Iteration   4: 48.590 ops/s
Iteration   5: 48.561 ops/s

# Run progress: 90.00% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 49.581 ops/s
# Warmup Iteration   2: 50.105 ops/s
# Warmup Iteration   3: 49.963 ops/s
# Warmup Iteration   4: 50.173 ops/s
# Warmup Iteration   5: 50.044 ops/s
Iteration   1: 49.877 ops/s
Iteration   2: 50.101 ops/s
Iteration   3: 50.126 ops/s
Iteration   4: 49.975 ops/s
Iteration   5: 50.066 ops/s


Result "com.gs.collections.impl.jmh.BagAddAllTest.guava":
  49.146 ±(99.9%) 0.544 ops/s [Average]
  (min, avg, max) = (48.325, 49.146, 50.126), stdev = 0.726
  CI (99.9%): [48.602, 49.690] (assumes normal distribution)


# Run complete. Total time: 00:16:44

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark             Mode  Cnt   Score   Error  Units
BagAddAllTest.gsc    thrpt   25  97.890 ± 2.204  ops/s
BagAddAllTest.guava  thrpt   25  49.146 ± 0.544  ops/s

Benchmark result is saved to gs-collections/exp-RETU-out-jdk8/microbenchmarks-original_BagAddAllTest_retu_trial1.csv
