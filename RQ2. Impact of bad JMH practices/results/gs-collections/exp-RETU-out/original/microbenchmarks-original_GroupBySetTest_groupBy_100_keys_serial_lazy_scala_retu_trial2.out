# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Warmup: 20 iterations, 2 s each
# Measurement: 10 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.gs.collections.impl.jmh.GroupBySetTest.groupBy_100_keys_serial_lazy_scala

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 2
# Warmup Iteration   1: 9.366 ops/s
# Warmup Iteration   2: 15.947 ops/s
# Warmup Iteration   3: 15.992 ops/s
# Warmup Iteration   4: 14.168 ops/s
# Warmup Iteration   5: 15.981 ops/s
# Warmup Iteration   6: 15.968 ops/s
# Warmup Iteration   7: 13.793 ops/s
# Warmup Iteration   8: 13.485 ops/s
# Warmup Iteration   9: 16.044 ops/s
# Warmup Iteration  10: 15.946 ops/s
# Warmup Iteration  11: 15.845 ops/s
# Warmup Iteration  12: 15.991 ops/s
# Warmup Iteration  13: 14.937 ops/s
# Warmup Iteration  14: 14.363 ops/s
# Warmup Iteration  15: 16.048 ops/s
# Warmup Iteration  16: 15.921 ops/s
# Warmup Iteration  17: 15.818 ops/s
# Warmup Iteration  18: 15.898 ops/s
# Warmup Iteration  19: 14.875 ops/s
# Warmup Iteration  20: 15.234 ops/s
Iteration   1: 16.028 ops/s
Iteration   2: 15.931 ops/s
Iteration   3: 15.233 ops/s
Iteration   4: 14.963 ops/s
Iteration   5: 14.493 ops/s
Iteration   6: 14.125 ops/s
Iteration   7: 14.467 ops/s
Iteration   8: 15.920 ops/s
Iteration   9: 15.703 ops/s
Iteration  10: 14.987 ops/s

# Run progress: 50.00% complete, ETA 00:01:01
# Fork: 2 of 2
# Warmup Iteration   1: 9.439 ops/s
# Warmup Iteration   2: 15.835 ops/s
# Warmup Iteration   3: 16.108 ops/s
# Warmup Iteration   4: 14.122 ops/s
# Warmup Iteration   5: 15.972 ops/s
# Warmup Iteration   6: 15.929 ops/s
# Warmup Iteration   7: 13.648 ops/s
# Warmup Iteration   8: 13.668 ops/s
# Warmup Iteration   9: 15.934 ops/s
# Warmup Iteration  10: 15.843 ops/s
# Warmup Iteration  11: 15.597 ops/s
# Warmup Iteration  12: 15.344 ops/s
# Warmup Iteration  13: 13.700 ops/s
# Warmup Iteration  14: 13.686 ops/s
# Warmup Iteration  15: 15.917 ops/s
# Warmup Iteration  16: 15.866 ops/s
# Warmup Iteration  17: 15.203 ops/s
# Warmup Iteration  18: 15.910 ops/s
# Warmup Iteration  19: 15.869 ops/s
# Warmup Iteration  20: 15.754 ops/s
Iteration   1: 14.898 ops/s
Iteration   2: 15.905 ops/s
Iteration   3: 15.725 ops/s
Iteration   4: 15.933 ops/s
Iteration   5: 15.902 ops/s
Iteration   6: 15.750 ops/s
Iteration   7: 15.943 ops/s
Iteration   8: 15.881 ops/s
Iteration   9: 15.567 ops/s
Iteration  10: 15.338 ops/s


Result "com.gs.collections.impl.jmh.GroupBySetTest.groupBy_100_keys_serial_lazy_scala":
  15.435 ±(99.9%) 0.510 ops/s [Average]
  (min, avg, max) = (14.125, 15.435, 16.028), stdev = 0.587
  CI (99.9%): [14.925, 15.945] (assumes normal distribution)


# Run complete. Total time: 00:02:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt   Score   Error  Units
GroupBySetTest.groupBy_100_keys_serial_lazy_scala  thrpt   20  15.435 ± 0.510  ops/s

Benchmark result is saved to gs-collections/exp-RETU-STATIC-out/microbenchmarks-original_GroupBySetTest_groupBy_100_keys_serial_lazy_scala_retu_trial2.csv
