# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Warmup: 20 iterations, 2 s each
# Measurement: 10 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.gs.collections.impl.jmh.GroupBySetTest.groupBy_2_keys_serial_eager_scala

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 2
# Warmup Iteration   1: 6.925 ops/s
# Warmup Iteration   2: 11.322 ops/s
# Warmup Iteration   3: 11.691 ops/s
# Warmup Iteration   4: 10.912 ops/s
# Warmup Iteration   5: 11.802 ops/s
# Warmup Iteration   6: 12.239 ops/s
# Warmup Iteration   7: 11.777 ops/s
# Warmup Iteration   8: 10.026 ops/s
# Warmup Iteration   9: 11.721 ops/s
# Warmup Iteration  10: 12.333 ops/s
# Warmup Iteration  11: 12.255 ops/s
# Warmup Iteration  12: 12.299 ops/s
# Warmup Iteration  13: 11.810 ops/s
# Warmup Iteration  14: 10.093 ops/s
# Warmup Iteration  15: 11.450 ops/s
# Warmup Iteration  16: 12.290 ops/s
# Warmup Iteration  17: 12.335 ops/s
# Warmup Iteration  18: 11.739 ops/s
# Warmup Iteration  19: 12.310 ops/s
# Warmup Iteration  20: 12.326 ops/s
Iteration   1: 12.069 ops/s
Iteration   2: 12.333 ops/s
Iteration   3: 12.354 ops/s
Iteration   4: 12.295 ops/s
Iteration   5: 12.322 ops/s
Iteration   6: 12.294 ops/s
Iteration   7: 11.809 ops/s
Iteration   8: 12.297 ops/s
Iteration   9: 12.092 ops/s
Iteration  10: 10.909 ops/s

# Run progress: 50.00% complete, ETA 00:01:01
# Fork: 2 of 2
# Warmup Iteration   1: 7.860 ops/s
# Warmup Iteration   2: 11.218 ops/s
# Warmup Iteration   3: 12.084 ops/s
# Warmup Iteration   4: 10.823 ops/s
# Warmup Iteration   5: 10.867 ops/s
# Warmup Iteration   6: 11.759 ops/s
# Warmup Iteration   7: 11.171 ops/s
# Warmup Iteration   8: 9.908 ops/s
# Warmup Iteration   9: 11.173 ops/s
# Warmup Iteration  10: 11.731 ops/s
# Warmup Iteration  11: 11.434 ops/s
# Warmup Iteration  12: 12.054 ops/s
# Warmup Iteration  13: 12.053 ops/s
# Warmup Iteration  14: 10.997 ops/s
# Warmup Iteration  15: 10.474 ops/s
# Warmup Iteration  16: 10.312 ops/s
# Warmup Iteration  17: 11.584 ops/s
# Warmup Iteration  18: 12.046 ops/s
# Warmup Iteration  19: 11.987 ops/s
# Warmup Iteration  20: 11.770 ops/s
Iteration   1: 10.620 ops/s
Iteration   2: 10.790 ops/s
Iteration   3: 11.758 ops/s
Iteration   4: 12.102 ops/s
Iteration   5: 11.942 ops/s
Iteration   6: 12.058 ops/s
Iteration   7: 12.019 ops/s
Iteration   8: 11.483 ops/s
Iteration   9: 11.653 ops/s
Iteration  10: 11.249 ops/s


Result "com.gs.collections.impl.jmh.GroupBySetTest.groupBy_2_keys_serial_eager_scala":
  11.822 ±(99.9%) 0.472 ops/s [Average]
  (min, avg, max) = (10.620, 11.822, 12.354), stdev = 0.543
  CI (99.9%): [11.351, 12.294] (assumes normal distribution)


# Run complete. Total time: 00:02:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt   Score   Error  Units
GroupBySetTest.groupBy_2_keys_serial_eager_scala  thrpt   20  11.822 ± 0.472  ops/s

Benchmark result is saved to gs-collections/exp-RETU-STATIC-out/microbenchmarks-original_GroupBySetTest_groupBy_2_keys_serial_eager_scala_retu_trial1.csv
