# JMH version: 1.21
# VM version: JDK 1.8.0_181, OpenJDK 64-Bit Server VM, 25.181-b13
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Warmup: 20 iterations, 2 s each
# Measurement: 10 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.gs.collections.impl.jmh.GroupBySetTest.groupBy_100_keys_serial_eager_scala

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 2
# Warmup Iteration   1: 4.801 ops/s
# Warmup Iteration   2: 6.382 ops/s
# Warmup Iteration   3: 7.216 ops/s
# Warmup Iteration   4: 7.075 ops/s
# Warmup Iteration   5: 7.365 ops/s
# Warmup Iteration   6: 7.360 ops/s
# Warmup Iteration   7: 6.667 ops/s
# Warmup Iteration   8: 6.922 ops/s
# Warmup Iteration   9: 7.086 ops/s
# Warmup Iteration  10: 7.048 ops/s
# Warmup Iteration  11: 7.088 ops/s
# Warmup Iteration  12: 7.010 ops/s
# Warmup Iteration  13: 6.385 ops/s
# Warmup Iteration  14: 6.355 ops/s
# Warmup Iteration  15: 5.893 ops/s
# Warmup Iteration  16: 7.067 ops/s
# Warmup Iteration  17: 7.101 ops/s
# Warmup Iteration  18: 7.092 ops/s
# Warmup Iteration  19: 7.067 ops/s
# Warmup Iteration  20: 7.077 ops/s
Iteration   1: 7.098 ops/s
Iteration   2: 7.109 ops/s
Iteration   3: 7.086 ops/s
Iteration   4: 5.616 ops/s
Iteration   5: 5.495 ops/s
Iteration   6: 7.084 ops/s
Iteration   7: 7.111 ops/s
Iteration   8: 6.660 ops/s
Iteration   9: 7.098 ops/s
Iteration  10: 7.078 ops/s

# Run progress: 50.00% complete, ETA 00:01:03
# Fork: 2 of 2
# Warmup Iteration   1: 4.752 ops/s
# Warmup Iteration   2: 7.009 ops/s
# Warmup Iteration   3: 7.043 ops/s
# Warmup Iteration   4: 6.692 ops/s
# Warmup Iteration   5: 7.070 ops/s
# Warmup Iteration   6: 7.005 ops/s
# Warmup Iteration   7: 6.126 ops/s
# Warmup Iteration   8: 6.761 ops/s
# Warmup Iteration   9: 7.223 ops/s
# Warmup Iteration  10: 7.197 ops/s
# Warmup Iteration  11: 7.187 ops/s
# Warmup Iteration  12: 6.931 ops/s
# Warmup Iteration  13: 6.505 ops/s
# Warmup Iteration  14: 6.460 ops/s
# Warmup Iteration  15: 5.993 ops/s
# Warmup Iteration  16: 6.981 ops/s
# Warmup Iteration  17: 5.120 ops/s
# Warmup Iteration  18: 6.210 ops/s
# Warmup Iteration  19: 6.942 ops/s
# Warmup Iteration  20: 7.198 ops/s
Iteration   1: 7.198 ops/s
Iteration   2: 7.223 ops/s
Iteration   3: 7.213 ops/s
Iteration   4: 6.952 ops/s
Iteration   5: 7.105 ops/s
Iteration   6: 6.438 ops/s
Iteration   7: 6.474 ops/s
Iteration   8: 7.201 ops/s
Iteration   9: 7.209 ops/s
Iteration  10: 7.202 ops/s


Result "com.gs.collections.impl.jmh.GroupBySetTest.groupBy_100_keys_serial_eager_scala":
  6.882 ±(99.9%) 0.443 ops/s [Average]
  (min, avg, max) = (5.495, 6.882, 7.223), stdev = 0.510
  CI (99.9%): [6.439, 7.326] (assumes normal distribution)


# Run complete. Total time: 00:02:06

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt  Score   Error  Units
GroupBySetTest.groupBy_100_keys_serial_eager_scala  thrpt   20  6.882 ± 0.443  ops/s

Benchmark result is saved to gs-collections/exp-RETU-STATIC-out/microbenchmarks-original_GroupBySetTest_groupBy_100_keys_serial_eager_scala_retu_trial1.csv
